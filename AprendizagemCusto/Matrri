# carrega as bibliotecas
pacman::p_load(ade4, arules, car, caret, corrplot, data.table, dplyr, DMwR, e1071, forcats, funModeling, ggplot2, mlbench, mltools, randomForest, rattle, tidyverse)

# leitura da base de dados
general_data <- fread("https://covid.ourworldindata.org/data/owid-covid-data.csv")
general_data <- general_data %>% filter(!is.na(new_cases))
general_data <- general_data %>% filter(!is.na(total_cases))
general_data <- general_data[!is.na(general_data$new_vaccinations),]

# Dummies
general_data_D <- acm.disjonctif(as.data.frame(general_data$continent))
names(general_data_D) <- c('Continent', 'Africa', 'Asia', 'Europe', 'North_America', 'Oceania', 'South_America')
general_data <- cbind(general_data, general_data_D)

# Discretização
general_data$total_case_Disc <- discretize(general_data$total_cases, method = "interval", breaks = 2, labels = c("baixa", "alta"))

table(general_data$total_case_Disc)

# Treino e Teste: Pré-processamento
particaoCovid = createDataPartition(general_data$total_cases, p = .7, list = F) # cria a partiÃ§Ã£o 70-30
treinoCovid = general_data[particaoCovid, ] # treino
testeCovid = general_data[-particaoCovid, ] # - treino = teste

prop.table(table(treinoCovid$total_case_Disc))

# Validação Cruzada: Pré-processamento
# Controle de treinamento
train.control <- trainControl(method = "cv", number = 10, verboseIter = T) # controle de treino

matrizCusto <- matrix(c(0,1,1000,0), ncol = 2)
rownames(matrizCusto) <- levels(treinoCovid$total_case_Disc)
colnames(matrizCusto) <- levels(treinoCovid$total_case_Disc)
matrizCusto

general_data_RF_CLASS <- randomForest(total_cases ~ Continent + Africa + Asia + Europe + North_America + Oceania + South_America + new_cases, data = treinoCovid, method = "cforest", parms= list(loss= matrizCusto))
general_data_RF_CLASS

predicao_general_data_RF_CLASS = predict(general_data_RF_CLASS, testeCovid) # criar predição

